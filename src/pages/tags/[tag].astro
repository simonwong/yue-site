---
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from 'astro'
import type { Frontmatter } from '@/types/post'
import BaseLayout from '../../layouts/BaseLayout.astro'
import BlogPost from '../../components/BlogPost.astro'

export const prerender = true

export const getStaticPaths = (async () => {
  const allPosts = (await Astro.glob<Frontmatter>('../posts/*.md')) as unknown as {
    frontmatter: Frontmatter
    url: string
  }[]

  const uniqueTags = [
    ...new Set(allPosts.map(post => post.frontmatter.tags).flat()),
  ]

  return uniqueTags.map(tag => {
    const filteredPosts = allPosts.filter(post =>
      post.frontmatter.tags.includes(tag),
    )
    return {
      params: { tag },
      props: { posts: filteredPosts },
    }
  })
}) satisfies GetStaticPaths

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params
const { posts } = Astro.props
---

<BaseLayout pageTitle={tag}>
  <p>包含「{tag}」标签的文章</p>
  <ul>
    {
      posts?.map(post => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
